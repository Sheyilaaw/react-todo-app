{"version":3,"sources":["Todos.js","AddTodo.js","App.js","serviceWorker.js","index.js"],"names":["Todos","_ref","todos","deleteTodo","todoList","length","map","todo","react_default","a","createElement","className","key","id","content","onClick","AddTodo","state","handleChange","e","_this","setState","target","value","handleSubmit","preventDefault","props","addTodo","onSubmit","this","htmlFor","type","onChange","name","Component","App","filter","parseInt","Math","random","Object","toConsumableArray","concat","src_Todos","src_AddTodo","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2MAyBeA,EAvBD,SAAAC,GAAyB,IAAvBC,EAAuBD,EAAvBC,MAAOC,EAAgBF,EAAhBE,WACbC,EAAWF,EAAMG,OAAO,EAC1BH,EAAMI,IAAI,SAAAC,GACN,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBAAkBC,IAAKL,EAAKM,IACvCL,EAAAC,EAAAC,cAAA,YACKH,EAAKO,QACNN,EAAAC,EAAAC,cAAA,QAAMC,UAAU,YAAYI,QAAS,WAAOZ,EAAWI,EAAKM,MAA5D,cAQhBL,EAAAC,EAAAC,cAAA,KAAGC,UAAU,UAAb,oBAEJ,OACGH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACVP,ICiBGY,6MAlCXC,MAAQ,CACJH,QAAS,MAGbI,aAAe,SAACC,GACZC,EAAKC,SAAS,CACVP,QAASK,EAAEG,OAAOC,WAI1BC,aAAe,SAACL,GACZA,EAAEM,iBACFL,EAAKM,MAAMC,QAAQP,EAAKH,OACxBG,EAAKC,SAAS,CACVP,QAAS,8EAKb,OACIN,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,QAAMkB,SAAUC,KAAKL,cACjBhB,EAAAC,EAAAC,cAAA,SAAOoB,QAAQ,WAAf,iBACAtB,EAAAC,EAAAC,cAAA,SAAOqB,KAAK,OAAOlB,GAAG,UAAUmB,SAAUH,KAAKX,aAAcK,MAAOM,KAAKZ,MAAMH,UAC/EN,EAAAC,EAAAC,cAAA,UAAQC,UAAU,+BAA+BoB,KAAK,SAASE,KAAK,UAApE,gBA1BEC,aCoCPC,6MAhCblB,MAAQ,CACJf,MAAM,MAGVC,WAAa,SAACU,GACV,IAAMX,EAAQkB,EAAKH,MAAMf,MAAMkC,OAAO,SAAA7B,GACnC,OAAOA,EAAKM,KAAOA,IAEtBO,EAAKC,SAAS,CACVnB,MAAOA,OAIfyB,QAAU,SAACpB,GACPA,EAAKM,GAAKwB,SAAyB,IAAhBC,KAAKC,UACxB,IAAIrC,EAAKsC,OAAAC,EAAA,EAAAD,CAAOpB,EAAKH,MAAMf,OAAlBwC,OAAA,CAAwBnC,IACjCa,EAAKC,SAAS,CACXnB,MAAOA,6EAKV,OACEM,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACXH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,oBAAd,YACAH,EAAAC,EAAAC,cAACiC,EAAD,CAAOzC,MAAO2B,KAAKZ,MAAMf,MAAOC,WAAY0B,KAAK1B,aACjDK,EAAAC,EAAAC,cAACkC,EAAD,CAASjB,QAASE,KAAKF,kBA5BjBO,aCQEW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO3C,EAAAC,EAAAC,cAAC0C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.da6aae32.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Todos = ({todos, deleteTodo}) => {\r\n    const todoList = todos.length>0 ? (\r\n        todos.map(todo => {\r\n            return (\r\n                <div className=\"collection-item\" key={todo.id}>\r\n                    <span>\r\n                        {todo.content}\r\n                        <span className=\"badge red\" onClick={() => {deleteTodo(todo.id)}}>\r\n                            Delete\r\n                        </span>\r\n                    </span>\r\n                </div>\r\n            )\r\n        })\r\n    ) : (\r\n        <p className=\"center\"> No todo's left </p>\r\n    );\r\n    return (\r\n       <div className=\"todos collection\">\r\n           {todoList}\r\n       </div>\r\n    )\r\n};\r\nexport default Todos;","import React,{ Component } from 'react';\r\n\r\nclass AddTodo extends Component {\r\n\r\n    state = {\r\n        content: ''\r\n    };\r\n\r\n    handleChange = (e) => {\r\n        this.setState({\r\n            content: e.target.value\r\n        });\r\n    };\r\n\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        this.props.addTodo(this.state);\r\n        this.setState({\r\n            content: ''\r\n        })\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <form onSubmit={this.handleSubmit}>\r\n                    <label htmlFor=\"content\">Add New Todo:</label>\r\n                    <input type=\"text\" id=\"content\" onChange={this.handleChange} value={this.state.content} />\r\n                    <button className=\"btn waves-effect waves-light\" type=\"submit\" name=\"action\">\r\n                        Add\r\n                    </button>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default AddTodo;","import React, { Component } from 'react';\nimport Todos from \"./Todos\";\nimport AddTodo from \"./AddTodo\";\n\nclass App extends Component {\n\n  state = {\n      todos:[]\n  };\n\n  deleteTodo = (id) => {\n      const todos = this.state.todos.filter(todo => {\n         return todo.id !== id;\n      });\n      this.setState({\n          todos: todos\n      })\n  };\n\n  addTodo = (todo) => {\n      todo.id = parseInt(Math.random() * 100);\n      let todos = [...this.state.todos,todo];\n      this.setState({\n         todos: todos\n      });\n  };\n\n  render() {\n      return (\n        <div className=\"todo-app container\">\n            <h1 className=\"center blue-text\">Todo App</h1>\n            <Todos todos={this.state.todos} deleteTodo={this.deleteTodo} />\n            <AddTodo addTodo={this.addTodo} />\n        </div>\n      );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}